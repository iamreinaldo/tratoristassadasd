import streamlit as st
import pandas as pd
from streamlit_gsheets import GSheetsConnection
from datetime import date

st.set_page_config(page_title="Fantasy - Competi√ß√£o Vigente", page_icon="üèÜ")

st.title("üî• Competi√ß√£o Vigente")
st.write("Acompanhe aqui a competi√ß√£o que est√° mais perto da grande final!")

# --- Conex√£o e Carregamento dos Dados ---
try:
    conn = st.connection("gsheets", type=GSheetsConnection)
    df = conn.read(worksheet="P√°gina1", usecols=list(range(5)), ttl="10m")
    df = df.dropna(how='all')
except Exception as e:
    st.error(f"Ocorreu um erro ao conectar ou ler a planilha. Verifique suas configura√ß√µes. Erro: {e}")
    st.stop()

# --- Processamento e L√≥gica da P√°gina ---

# Converte colunas para os tipos corretos
df['ID'] = pd.to_numeric(df['ID'])
df['DataFinal'] = pd.to_datetime(df['DataFinal'])
# Preenche valores vazios na coluna campe√£o para garantir a filtragem correta
df['Campeao'] = df['Campeao'].fillna('')

# Filtra apenas as competi√ß√µes que ainda n√£o t√™m um campe√£o definido
df_vigentes = df[df['Campeao'] == ''].copy()

if df_vigentes.empty:
    st.info("üéâ Todas as competi√ß√µes foram finalizadas! Cadastre uma nova na p√°gina 'Cadastrar Competi√ß√£o'!")
else:
    # Ordena para pegar a competi√ß√£o com a data final mais pr√≥xima
    df_vigentes = df_vigentes.sort_values(by='DataFinal', ascending=True)
    competicao_atual = df_vigentes.iloc[0]
    
    st.subheader(f"{competicao_atual['Competicao']} - {competicao_atual['Temporada']}")
    
    col1, col2 = st.columns(2)
    col1.metric("Data da Final", competicao_atual['DataFinal'].strftime('%d/%m/%Y'))
    
    hoje = pd.to_datetime(date.today())
    delta = competicao_atual['DataFinal'] - hoje
    
    col2.metric("Contagem Regressiva", f"{delta.days} dias")

    # --- L√ìGICA PRINCIPAL: Mostrar formul√°rio na data da final ---
    if hoje >= competicao_atual['DataFinal']:
        st.warning("A data final chegou! √â hora de definir o campe√£o.", icon="üö®")
        
        with st.form("form_definir_campeao"):
            nome_campeao = st.text_input("üëë E o grande campe√£o √©...")
            submitted = st.form_submit_button("Declarar Campe√£o!")
            
            if submitted:
                if not nome_campeao:
                    st.error("Voc√™ precisa informar o nome do campe√£o!")
                else:
                    # Altera o valor 'Campeao' no DataFrame original para a competi√ß√£o atual
                    df.loc[df['ID'] == competicao_atual['ID'], 'Campeao'] = nome_campeao
                    
                    # Salva o DataFrame inteiro de volta na planilha
                    conn.update(worksheet="P√°gina1", data=df)
                    
                    st.balloons()
                    st.success(f"Parab√©ns a {nome_campeao}, campe√£o de {competicao_atual['Competicao']} {competicao_atual['Temporada']}!")
                    st.rerun() # Recarrega a p√°gina para atualizar as informa√ß√µes
    else:
        st.info("Aguardando a data da final para a defini√ß√£o do campe√£o.")